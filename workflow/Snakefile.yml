from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
HTTP = HTTPRemoteProvider()

import os
import pandas

###############################################################################
# General config
public_data_dir_path = config['public_data_dir'] # db path
process_data_dir_path = config['process_data_dir'] # singularity image
region = config['region'] # singularity image
window = config['window'] # singularity image

###############################################################################
# eQTL config
if "eqtl_tsv" in config:
    eqtl_tsv_path = config["eqtl_tsv"] # path to the eqtl< ods list
else:
    from eqtl2gwas.URL import URL
    url = 'https://raw.githubusercontent.com/eQTL-Catalogue/eQTL-Catalogue-resources/master/tabix/tabix_ftp_paths.tsv'
    eqtl_tsv_path = URL(url=url).download()
    config["eqtl_tsv"] = eqtl_tsv_path
eqtl_df = pandas.read_csv(eqtl_tsv_path, sep="\t")
# keep urls containing "ge" or "microarray"
eqtl_df = eqtl_df.loc[eqtl_df['ftp_path'].str.contains('/ge/|/microarray/',regex=True,na=False), ]
eqtl_id_lst = (eqtl_df['ftp_path'].str.replace('.all.tsv.gz', '', regex=True)).str.split('/', expand=True)[10].tolist()
eqtl_df.index = eqtl_id_lst
eqtl_fdr=str(config["eqtl_fdr"]) # gwas p-value, eg. 5e-8

# GWAS config
gwas_pval=str(config["gwas_pval"]) # gwas p-value, eg. 5e-8
gwas_ods_path = config["gwas_ods"] # path to the gwas ods list
gwas_df = pandas.read_excel(gwas_ods_path, header=0)
gwas_df['trait'] = gwas_df['trait'].str.replace("'", "")
gwas_id_lst = gwas_df['id'].tolist()
gwas_traitname_lst = gwas_df['trait'].tolist()
gwas_dic = dict(zip(gwas_id_lst, gwas_traitname_lst))

rule all:
    input:
        expand(os.path.join("out/coloc", region, gwas_pval, str(window), "{eqtl_id}/{gwas_id}.tsv"), eqtl_id=eqtl_id_lst, gwas_id=gwas_id_lst),

rule coloc:
    input:
        gwas_vcf=os.path.join("out/intersection", "fdr"+str(eqtl_fdr), gwas_pval, str(window), "{eqtl_id}/{gwas_id}.vcf.bgz"),
        gwas_tbi=os.path.join("out/intersection", "fdr"+str(eqtl_fdr), gwas_pval, str(window), "{eqtl_id}/{gwas_id}.vcf.bgz.tbi"),
        eqtl_leads_tsv=lambda w: os.path.join(process_data_dir_path, "fdr"+str(eqtl_fdr), "ftp.ebi.ac.uk/pub/databases/spot/eQTL/sumstats", eqtl_df.loc[w.eqtl_id, "study"], eqtl_df.loc[w.eqtl_id, "quant_method"], "{eqtl_id}.leadpair.tsv"),
        eqtl_all_gz=lambda w: os.path.join(process_data_dir_path, "fdr"+str(eqtl_fdr), "ftp.ebi.ac.uk/pub/databases/spot/eQTL/sumstats", eqtl_df.loc[w.eqtl_id, "study"], eqtl_df.loc[w.eqtl_id, "quant_method"], "{eqtl_id}.all.regions.tsv.gz"),
        eqtl_all_tsv_gz_tbi=lambda w: os.path.join(process_data_dir_path, "fdr"+str(eqtl_fdr), "ftp.ebi.ac.uk/pub/databases/spot/eQTL/sumstats", eqtl_df.loc[w.eqtl_id, "study"], eqtl_df.loc[w.eqtl_id, "quant_method"], "{eqtl_id}.all.regions.tsv.gz.tbi"),
    output:
        coloc_tsv=os.path.join("out/coloc", region, gwas_pval, str(window), "{eqtl_id}/{gwas_id}.tsv"),
    log:
        os.path.join("logs/coloc", region, gwas_pval, str(window), "{eqtl_id}/{gwas_id}.log"),
    params:
        window = window,
        gwas_pval=gwas_pval,
    shell:
        """
        Rscript workflow/scripts/run_coloc2.R {params.window} {params.gwas_pval} {input.gwas_vcf} {input.eqtl_leads_tsv} {input.eqtl_all_gz} {output.coloc_tsv}
        """

rule cross_tabix:
    input:
        gwas_vcf=os.path.join("out/intersection", "fdr"+str(eqtl_fdr), gwas_pval, str(window), "{eqtl_id}/{gwas_id}.vcf.bgz"),
    output:
        gwas_tbi=os.path.join("out/intersection", "fdr"+str(eqtl_fdr), gwas_pval, str(window), "{eqtl_id}/{gwas_id}.vcf.bgz.tbi"),
    shell:
        """tabix -p vcf  {input.gwas_vcf}"""

rule cross_eqtl_gwas:
    input:
        regions=lambda w: os.path.join(process_data_dir_path, "fdr"+str(eqtl_fdr), "ftp.ebi.ac.uk/pub/databases/spot/eQTL/sumstats", eqtl_df.loc[w.eqtl_id, "study"], eqtl_df.loc[w.eqtl_id, "quant_method"], "{eqtl_id}.permuted.regions.tsv"),
        gwas_vcf_gz=os.path.join(process_data_dir_path, "hg38/gwas.mrcieu.ac.uk/files/{gwas_id}/{gwas_id}.vcf.bgz"),
        gwas_vcf_gz_tbi=os.path.join(process_data_dir_path, "hg38/gwas.mrcieu.ac.uk/files/{gwas_id}/{gwas_id}.vcf.bgz.csi"),
    output:
        gwas_vcf=os.path.join("out/intersection", "fdr"+str(eqtl_fdr), gwas_pval, str(window), "{eqtl_id}/{gwas_id}.vcf.bgz"),
    shell:
        """bcftools view -R {input.regions}  {input.gwas_vcf_gz} |bgzip >{output.gwas_vcf}"""
