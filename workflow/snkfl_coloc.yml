from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
HTTP = HTTPRemoteProvider()

import os
import pandas

###############################################################################
# General config
maf_sqlite = config['maf_sqlite']
outdir = config['outdir']
process_data_dir_path = config['process_data_dir']
public_data_dir_path = config['public_data_dir']
window = str(config['window'])

if "image_sif" in config:
    image_sif = config['image_sif'] # singularity image
    container: image_sif

###############################################################################
# eQTL config
if "eqtl_tsv" in config:
    eqtl_tsv_path = config["eqtl_tsv"] # path to the eqtl< ods list
else:
    from gwas2eqtl.URL import URL
    eqtl_tsv_path = 'https://raw.githubusercontent.com/eQTL-Catalogue/eQTL-Catalogue-resources/master/tabix/tabix_ftp_paths.tsv'
eqtl_df = pandas.read_csv(eqtl_tsv_path, sep="\t", usecols=[0, 6, 8])
eqtl_df = eqtl_df.loc[eqtl_df['ftp_path'].str.contains('/ge/|/microarray/',regex=True,na=False), ]
#    eqtl_ftp_path_lst = eqtl_df['ftp_path'].tolist()
# keep urls containing "ge" or "microarray"
#eqtl_df.sort_values(eqtl_df.columns.tolist(), inplace=True)
eqtl_df['index'] = (eqtl_df['ftp_path'].str.replace('.all.tsv.gz', '', regex=True)).str.split('/', expand=True)[10].tolist()
eqtl_df.set_index('index', drop=True, verify_integrity=True, inplace=True)
eqtl_id_lst = (eqtl_df.index).tolist()

###############################################################################
# GWAS config
gwas_ods_path = config["gwas_ods"] # path to the gwas ods list
gwas_df = pandas.read_excel(gwas_ods_path, header=0)
gwas_id_lst = sorted(gwas_df['id'].tolist())

###############################################################################
# Tophits config (https://rdrr.io/github/MRCIEU/ieugwasr/man/tophits.html)
pval = str(config["pval"])  # use this p-value threshold
r2 = str(config["r2"])  # use this clumping r2 threshold
kb = str(config["kb"])  # use this clumping "kb_" + kb window

# PYTHONPATH=.:$PYTHONPATH snakemake -j all -s workflow/snkfl_coloc.yml -p --config gwas_ods=config/gwas_ebi-a-GCST002318.ods eqtl_tsv=config/eqtl_Schmiedel_2018_CD8_T-cell_naive.tsv pval=5e-8 r2=0.1 kb=1000 window=1000000 public_data_dir=/home/gonzalez/Software/public process_data_dir=/home/gonzalez/Software/process outdir=out/gwas418 maf_sqlite=out/eur_af.sqlite

rule all_coloc2:
    input:
        expand(os.path.join(outdir, "coloc", "{gwas_id}", "pval_" + pval, "r2_" + r2, "kb_" + kb, "window_" + window, "{eqtl_id}.tsv"), eqtl_id=eqtl_id_lst, gwas_id=gwas_id_lst),

rule coloc:
    input:
        tophits_hg38_tsv=os.path.join(outdir, "tophits", "{gwas_id}", "pval_" + pval, "r2_" + r2, "kb_" + kb, "hg38.tsv"),
        gwas_vcf=os.path.join(process_data_dir_path, "hg38/gwas.mrcieu.ac.uk/files/{gwas_id}/{gwas_id}.vcf.bgz"),
        gwas_tbi=os.path.join(process_data_dir_path, "hg38/gwas.mrcieu.ac.uk/files/{gwas_id}/{gwas_id}.vcf.bgz.tbi"),
        eqtl_all_gz=lambda w: os.path.join(public_data_dir_path, "ftp.ebi.ac.uk/pub/databases/spot/eQTL/sumstats", eqtl_df.loc[w.eqtl_id, "study"], eqtl_df.loc[w.eqtl_id, "quant_method"], "{eqtl_id}.all.tsv.gz"),
        eqtl_permuted=lambda w: os.path.join(public_data_dir_path, "ftp.ebi.ac.uk/pub/databases/spot/eQTL/sumstats", eqtl_df.loc[w.eqtl_id, "study"], eqtl_df.loc[w.eqtl_id, "quant_method"], "{eqtl_id}.permuted.tsv.gz"),
        eqtl_all_gz_tbi=lambda w: os.path.join(public_data_dir_path, "ftp.ebi.ac.uk/pub/databases/spot/eQTL/sumstats", eqtl_df.loc[w.eqtl_id, "study"], eqtl_df.loc[w.eqtl_id, "quant_method"], "{eqtl_id}.all.tsv.gz.tbi"),
        eur_af_sqlite=maf_sqlite,
    output:
        coloc_tsv=os.path.join(outdir, "coloc", "{gwas_id}", "pval_" + pval, "r2_" + r2, "kb_" + kb, "window_" + window, "{eqtl_id}.tsv"),
    log:
        os.path.join(outdir, "logs", "coloc", "{gwas_id}", "pval_" + pval, "r2_" + r2, "kb_" + kb, "window_" + window, "{eqtl_id}.tsv"),
    params:
        gwas_id = "{gwas_id}",
        eqtl_id = "{eqtl_id}",
        window = window,
        pval = pval,
    shell:
        """
        Rscript workflow/scripts/run_coloc.R {params.gwas_id} {params.eqtl_id} {params.window} {params.pval} {input.tophits_hg38_tsv} {input.gwas_vcf} {input.eqtl_permuted} {input.eqtl_all_gz} {input.eur_af_sqlite} {output.coloc_tsv}
        """
