from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
HTTP = HTTPRemoteProvider()

import os
import pandas

###############################################################################
# General config
public_data_dir = config['public_data_dir'] # db path
process_data_dir = config['process_data_dir'] # singularity image

if "image_sif" in config:
    image_sif = config['image_sif'] # singularity image
    container: image_sif

###############################################################################
# GWAS config
chr_lst = range(1, 23)
#chr_lst = [22]

rule all:
    input:
        expand(os.path.join(process_data_dir, "ftp-trace.ncbi.nih.gov/1000genomes/ftp/release/20130502/ALL.chr{CHR}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.eur_af.tsv"), CHR=chr_lst),

rule g1k_totsv:
    input:
        os.path.join(public_data_dir, "ftp-trace.ncbi.nih.gov/1000genomes/ftp/release/20130502/ALL.chr{CHR}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz"),
    output:
        os.path.join(process_data_dir, "ftp-trace.ncbi.nih.gov/1000genomes/ftp/release/20130502/ALL.chr{CHR}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.eur_af.tsv"),
    shell:
        """bcftools query -f '%CHROM\t%POS\t%ID\t%REF\t%ALT\t%INFO/EUR_AF\n' {input[0]} >{output[0]}"""

rule dwnld_g1k:
    output:
        os.path.join(public_data_dir, "ftp-trace.ncbi.nih.gov/1000genomes/ftp/release/20130502/ALL.chr{CHR}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz"),
    params:
        "ftp-trace.ncbi.nih.gov/1000genomes/ftp/release/20130502/ALL.chr{CHR}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz",
        public_data_dir,
    shell:
        """wget -c -q -r {params[0]} -P {params[1]}"""

#rule create_db:
#    output:
#        os.path.join(process_data_dir, "ftp-trace.ncbi.nih.gov/1000genomes/ftp/release/20130502/ALL.chr{CHR}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.eur_af.tsv"),
#    shell:
#        """export DBFILE=eur_af.sqlite; rm -f $DBFILE; sqlite3 $DBFILE 'create table eur_af (chrom INTEGER, pos INTEGER, id TEXT, ref TEXT, alt TEXT, eur_af REAL, PRIMARY KEY(id));'"""


#export DBFILE=eur_af.sqlite; rm -f $DBFILE; sqlite3 $DBFILE 'create table eur_af (chrom INTEGER, pos INTEGER, id TEXT, ref TEXT, alt TEXT, eur_af REAL, PRIMARY KEY(id));'
#time bcftools query -f '%CHROM\t%POS\t%ID\t%REF\t%ALT\t%INFO/EUR_AF\n' /home/gonzalez/Software/ftp-trace.ncbi.nih.gov/1000genomes/ftp/release/20130502/ALL.chr22.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz >eur_af.tsv
#python -c 'import pandas; df=pandas.read_csv("eur_af.tsv", sep="\t", header=None); df.drop_duplicates(subset=[2], keep=False, inplace=True); df.to_csv("eur_af2.tsv", sep="\t", index=False, header=None)'
#cat eur_af2.tsv |sqlite3 -csv -separator $'\t' $DBFILE '.import /dev/stdin eur_af'

